
"Aнализ базы данных поездок такси в Нью-Йорке за январь 2020 года."

Это моя итоговая работа по курсу "Инженер данных".

По условиям задания необходимо провести анализ базы данных поездок такси в Нью-Йорке за январь 2020 года.

Исходные данные представляют собой таблицу из 18 столбцов и 6 405 009 строк.

На выходе необходимо получить витрину с данными о процентном отношении поездок с различным количеством пассажиров
 к общему количеству поездок на каждый день месяца - поездки без пассажира, с одним, двумя, тремя пассажирами, и более трех.
 Также нужно добавить для каждой из групп максимальную и минимальную стоимость поездки в этот день. 
 Отдельно был проведен анализ зависимости количества чаевых от количества пассажиров и пройденного расстояния.

План реализации:
- Подготовить облегченный вариант исходных данных, на которых буду писать код;
- Написать код с комментариями для получения итоговой витрины;
- Проверить работоспособность кода на облегченных данных;
- Заменить в коде облегченную версию данных на полную;
- Подготовить базу данных для проведения анализа зависимости размеров чаевых;
- Построить графики для анализа размеров чаевых;
- Провести анализ графиков;
- Подготовить данные для выгрузки в репозиторий;
- Выгрузить проект в репозитрорий.

Для построения итоговой витрины выбран Spark, развернутый на внешнем ресурсе. Сам код писался на Scala в Jupiter.
Для анализа зависимости размеров чаевых был выбран PGAdmin и Colaboratory установленные локально. 
В PGAdmin была выполнена витрина, в Colaboratory с использованием библиотеки Pandas построены графики.

Краткое описание:
1. Загрузил необходимые библиотеки, создал SparkSession, 
 создал структуру будущей базы данных и загрузил в нее данные из источника.

2. Провел очистку данных - удалил ненужные столбцы, строки не попадающие в диапазон января 2020 года,
 а также строки где значение чаевых не меньше 0, а стоимости и протяженности поездки меньше, либо равна 0.
 После очистки я получил таблицу из 5 столбцов и 6 316 818 строк 

3. Преобразовал данные:
	- создал отдельный датафрейм с общим количеством поездок за каждый день.
	- для каждой из групп пассажиров были выполнены следующие преобразования с очищенными данными:
		-- создан датафрейм с макс. и мин. стоимостью поездки на каждый день;
		-- создан датафрейм с количеством поездок на каждый день;
		-- объеденил датафреймы для расчетов при помощи join;
		-- преобразовал объединенный датафрейм в итоговый для каждой группы пассажиров.

4. Объеденил датафреймы каждой группы пассажиров в одну итоговую витрину.

Вывод: применение выбраных технологий позволяет проводить обработку
	достаточно большого объема данных за достаточно короткое время.



Вывод некоторых таблиц в коде закоментирован, в случае необходимости их можно посмотреть.